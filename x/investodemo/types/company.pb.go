// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: investodemo/company.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Company struct {
	Creator  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id       string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Mktgroi  string `protobuf:"bytes,3,opt,name=mktgroi,proto3" json:"mktgroi,omitempty"`
	Logo     string `protobuf:"bytes,4,opt,name=logo,proto3" json:"logo,omitempty"`
	Netflow  string `protobuf:"bytes,5,opt,name=netflow,proto3" json:"netflow,omitempty"`
	Industry string `protobuf:"bytes,6,opt,name=industry,proto3" json:"industry,omitempty"`
}

func (m *Company) Reset()         { *m = Company{} }
func (m *Company) String() string { return proto.CompactTextString(m) }
func (*Company) ProtoMessage()    {}
func (*Company) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbbe162702583c36, []int{0}
}
func (m *Company) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Company) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Company.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Company) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Company.Merge(m, src)
}
func (m *Company) XXX_Size() int {
	return m.Size()
}
func (m *Company) XXX_DiscardUnknown() {
	xxx_messageInfo_Company.DiscardUnknown(m)
}

var xxx_messageInfo_Company proto.InternalMessageInfo

func (m *Company) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Company) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Company) GetMktgroi() string {
	if m != nil {
		return m.Mktgroi
	}
	return ""
}

func (m *Company) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *Company) GetNetflow() string {
	if m != nil {
		return m.Netflow
	}
	return ""
}

func (m *Company) GetIndustry() string {
	if m != nil {
		return m.Industry
	}
	return ""
}

func init() {
	proto.RegisterType((*Company)(nil), "faddat.investodemo.investodemo.Company")
}

func init() { proto.RegisterFile("investodemo/company.proto", fileDescriptor_cbbe162702583c36) }

var fileDescriptor_cbbe162702583c36 = []byte{
	// 240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0xe3, 0x50, 0x5a, 0xf0, 0xc0, 0x60, 0x31, 0x98, 0x0e, 0x16, 0x62, 0x62, 0x21, 0x96,
	0xe0, 0x0d, 0x60, 0x65, 0x62, 0x64, 0x4b, 0x63, 0xd7, 0x58, 0xd4, 0xbe, 0xc8, 0xb9, 0x02, 0x79,
	0x0b, 0x36, 0x5e, 0x89, 0x31, 0x23, 0x23, 0x4a, 0x5e, 0x04, 0xc5, 0x0e, 0x55, 0xb6, 0xff, 0x3b,
	0x7f, 0x3e, 0xe9, 0x3f, 0x7a, 0x61, 0xfd, 0x9b, 0x6e, 0x10, 0x94, 0x76, 0x20, 0x2b, 0x70, 0x75,
	0xe9, 0xdb, 0xa2, 0x0e, 0x80, 0xc0, 0xc4, 0xb6, 0x54, 0xaa, 0xc4, 0x62, 0x66, 0xcc, 0xf3, 0xfa,
	0xdc, 0x80, 0x81, 0xa8, 0xca, 0x31, 0xa5, 0x5f, 0x57, 0x5f, 0x84, 0xae, 0x1e, 0xd2, 0x1e, 0xc6,
	0xe9, 0xaa, 0x0a, 0xba, 0x44, 0x08, 0x9c, 0x5c, 0x92, 0xeb, 0xd3, 0xa7, 0x7f, 0x64, 0x67, 0x34,
	0xb7, 0x8a, 0xe7, 0x71, 0x98, 0x5b, 0x35, 0x9a, 0xee, 0x15, 0x4d, 0x00, 0xcb, 0x8f, 0x92, 0x39,
	0x21, 0x63, 0x74, 0xb1, 0x03, 0x03, 0x7c, 0x11, 0xc7, 0x31, 0x8f, 0xb6, 0xd7, 0xb8, 0xdd, 0xc1,
	0x3b, 0x3f, 0x4e, 0xf6, 0x84, 0x6c, 0x4d, 0x4f, 0xac, 0x57, 0xfb, 0x06, 0x43, 0xcb, 0x97, 0xf1,
	0xe9, 0xc0, 0xf7, 0x8f, 0xdf, 0xbd, 0x20, 0x5d, 0x2f, 0xc8, 0x6f, 0x2f, 0xc8, 0xe7, 0x20, 0xb2,
	0x6e, 0x10, 0xd9, 0xcf, 0x20, 0xb2, 0xe7, 0x5b, 0x63, 0xf1, 0x65, 0xbf, 0x29, 0x2a, 0x70, 0x32,
	0x95, 0x96, 0x53, 0xd1, 0x9b, 0x78, 0x97, 0x0f, 0x39, 0xbf, 0x12, 0xb6, 0xb5, 0x6e, 0x36, 0xcb,
	0x58, 0xf7, 0xee, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xf4, 0x92, 0x63, 0x99, 0x41, 0x01, 0x00, 0x00,
}

func (m *Company) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Company) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Company) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Industry) > 0 {
		i -= len(m.Industry)
		copy(dAtA[i:], m.Industry)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Industry)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Netflow) > 0 {
		i -= len(m.Netflow)
		copy(dAtA[i:], m.Netflow)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Netflow)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Mktgroi) > 0 {
		i -= len(m.Mktgroi)
		copy(dAtA[i:], m.Mktgroi)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Mktgroi)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCompany(dAtA []byte, offset int, v uint64) int {
	offset -= sovCompany(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Company) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Mktgroi)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Netflow)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Industry)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func sovCompany(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCompany(x uint64) (n int) {
	return sovCompany(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Company) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Company: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Company: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mktgroi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mktgroi = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Netflow", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Netflow = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Industry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Industry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCompany(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCompany
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCompany
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCompany
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCompany        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCompany          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCompany = fmt.Errorf("proto: unexpected end of group")
)
